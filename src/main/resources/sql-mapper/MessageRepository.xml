<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.javacodes.blogwaver.repository.MessageRepository">
  <resultMap id="BaseResultMap" type="cn.javacodes.blogwaver.entity.Message">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="sender" jdbcType="VARCHAR" property="sender" />
    <result column="reciever" jdbcType="VARCHAR" property="reciever" />
    <result column="time" jdbcType="TIMESTAMP" property="time" />
    <result column="status" jdbcType="SMALLINT" property="status" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.javacodes.blogwaver.entity.Message">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Base_Column_List">
    id, sender, reciever, time, status
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from bw_message
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from bw_message
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="cn.javacodes.blogwaver.entity.Message" useGeneratedKeys="true" keyProperty="id">
    insert into bw_message (sender, reciever, time, 
      status, content)
    values (#{sender,jdbcType=VARCHAR}, #{reciever,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, 
      #{status,jdbcType=SMALLINT}, #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.javacodes.blogwaver.entity.Message" useGeneratedKeys="true" keyProperty="id">
    insert into bw_message
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="sender != null">
        sender,
      </if>
      <if test="reciever != null">
        reciever,
      </if>
      <if test="time != null">
        time,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="sender != null">
        #{sender,jdbcType=VARCHAR},
      </if>
      <if test="reciever != null">
        #{reciever,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=SMALLINT},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.javacodes.blogwaver.entity.Message">
    update bw_message
    <set>
      <if test="sender != null">
        sender = #{sender,jdbcType=VARCHAR},
      </if>
      <if test="reciever != null">
        reciever = #{reciever,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        time = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=SMALLINT},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.javacodes.blogwaver.entity.Message">
    update bw_message
    set sender = #{sender,jdbcType=VARCHAR},
      reciever = #{reciever,jdbcType=VARCHAR},
      time = #{time,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=SMALLINT},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.javacodes.blogwaver.entity.Message">
    update bw_message
    set sender = #{sender,jdbcType=VARCHAR},
      reciever = #{reciever,jdbcType=VARCHAR},
      time = #{time,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=SMALLINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>